From 6209c8735e2189c896a0ba6ffa60c9701d2bc69a Mon Sep 17 00:00:00 2001
From: taneros <taneros@duck.com>
Date: Fri, 23 Feb 2024 18:00:56 +0300
Subject: [PATCH] fix: filters redux product page

---
 .prettierrc                                   |   1 +
 .../pages_element/FilterPanel/index.jsx       | 121 +++++++++++-------
 src/features/products/productsSlice.js        | 104 +++++++--------
 src/pages/ProductsPage/index.jsx              |  81 ++----------
 4 files changed, 130 insertions(+), 177 deletions(-)
 create mode 100644 .prettierrc

diff --git a/.prettierrc b/.prettierrc
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/.prettierrc
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/src/components/pages_element/FilterPanel/index.jsx b/src/components/pages_element/FilterPanel/index.jsx
index 82a512a..c56eebd 100644
--- a/src/components/pages_element/FilterPanel/index.jsx
+++ b/src/components/pages_element/FilterPanel/index.jsx
@@ -1,78 +1,109 @@
 import React, { useState } from "react";
 import s from "./FilterPanel.module.css";
 import { BsChevronDown } from "react-icons/bs";
-import { useDispatch, useSelector } from "react-redux";
-import { filterByPriceRange, setMaxPrice, setMinPrice } from "../../../features/products/productsSlice";
+import { useDispatch } from "react-redux";
 
+import {
+  setSearchFilter,
+  toggleCategoryFilter,
+  setPriceRangeFilter,
+  setSorting,
+  getRelatedProducts,
+  selectFilteredProducts,
+} from "../../../features/products/productsSlice";
 
+export default function FilterPanel() {
+  const dispatch = useDispatch();
 
-export default function FilterPanel({
-   onCheckboxChange,
-    onOptionChange,
-    maxPrice, 
-    minPrice,
-    handleMaxPriceChange,
-     handleMinPriceChange, 
-     handleFromToPrice
-    }) {
+  // const [searchInput, setSearchInput] = useState('');
+  const [priceRange, setPriceRange] = useState({ min: null, max: null });
+  const [sortingOption, setSortingOption] = useState("default");
 
+  // const handleSearchInputChange = (event) => {
+  //   setSearchInput(event.target.value);
+  // };
 
+  // const handleSearch = () => {
+  //   dispatch(setSearchFilter(searchInput));
+  // };
 
-    // const { list } = useSelector(({ products }) => products )
-  const [selectedOption, setSelectedOption] = useState('by default');
-
-  //filter from ..to
+  const handleCategoryToggle = (event) => {
+    const category = event.target.value;
+    dispatch(toggleCategoryFilter({ category }));
+  };
 
+  const handleRangeChange = (event) => {
+    const { name, value } = event.target;
+    setPriceRange({ ...priceRange, [name]: value ? Number(value) : null });
+  };
 
-  const handleEnterKeyDown = (e) => {
-    if (e.key === 'Enter') {
-      e.preventDefault();
-    }
+  const handleFromToPrice = (from, to) => {
+    setPriceRange({
+      min: from ? Number(from) : null,
+      max: to ? Number(to) : null,
+    });
+    dispatch(
+      setPriceRangeFilter({
+        min: from ? Number(from) : null,
+        max: to ? Number(to) : null,
+      })
+    );
   };
 
-// console.log("isSelected", isSelected)
+  const handleSortingChange = (event) => {
+    setSortingOption(event.target.value);
+    dispatch(setSorting(event.target.value));
+  };
 
   return (
     <div className="container">
       <div className={s.filter_wrapper}>
         <div className={s.price_filter}>
           <span>Price</span>
-          <form className={s.filter__form}  onSubmit={(e) => handleFromToPrice(e.target.elements.from.value, e.target.elements.to.value)}>
-          <input 
+          <form
+            onSubmit={(e) =>
+              handleFromToPrice(
+                e.target.elements.from.value,
+                e.target.elements.to.value
+              )
+            }
+          >
+            <input
+              type="number"
               name="from"
-              placeholder="from" 
-              type="number"  
-              // value={priceFrom}
-              // onChange={ handleMinPriceChange}
-              // onKeyDown={handleEnterKeyDown}
+              value={priceRange.min}
+              onChange={handleRangeChange}
+              placeholder="from"
             />
-          <input 
+            <input
+              type="number"
               name="to"
-              placeholder="to" 
-              type="number" 
-              // value={priceTo}
-              // onChange={ handleMaxPriceChange }
-              // onKeyDown={handleEnterKeyDown}
-             />
-             </form>
+              value={priceRange.max}
+              onChange={handleRangeChange}
+              placeholder="to"
+            />
+          </form>
         </div>
         <div className={s.checkbox}>
           <span>Discounted items</span>
-           <label className={`${s.checkbox} ${s.style_c}`} >
-            <input type="checkbox"  onClick={onCheckboxChange}/>
-            <div className={s.checkbox__checkmark} ></div>
+          <label className={`${s.checkbox} ${s.style_c}`}>
+            <input type="checkbox" onClick={handleCategoryToggle} />
+            <div className={s.checkbox__checkmark}></div>
           </label>
         </div>
         <div className={s.sorter}>
-          
           <span>Sorted</span>
-          <select className={s.select_sorter} onChange={(e) => onOptionChange(e.target.value)}>
-            <option>by default</option>
-            <option>newest</option>
-            <option>price: high-low</option>
-            <option>price: low-high</option>
+          <select
+            className={s.select_sorter}
+            value={sortingOption}
+            onChange={handleSortingChange}
+          >
+            <option value="default">by default</option>
+            <option value="newest">newest</option>
+            <option value="price-high-low">price: high-low</option>
+            <option value="price-low-high">price: low-high</option>
           </select>
-          <BsChevronDown className={s.sorter__check}/>
+          <BsChevronDown className={s.sorter__check} />
         </div>
       </div>
     </div>
diff --git a/src/features/products/productsSlice.js b/src/features/products/productsSlice.js
index 090cce5..1b92e7a 100644
--- a/src/features/products/productsSlice.js
+++ b/src/features/products/productsSlice.js
@@ -25,66 +25,27 @@ export const getProducts = createAsyncThunk('products/getProducts',
 );
 
 const productsSlice = createSlice({
-  name: 'categories',
+  name: 'categories', // change to products???
   initialState: {
     list: [],
-    filtered: [],
     filters: {
-      hasDiscount: null,
-      sorted: null,
+      search: '',
+      range: { min: null, max: null },
     },
+    sorting: "default",
     related: [],
     isLoading: false,
-    minPrice: '',
-    maxPrice: '',
   },
   reducers: {
-    filterByPrice: (state, action) => {
-      state.filters.hasDiscount = action.payload;
-      state.filtered = state.filtered.filter(({
-        discont_price
-      }) => action.payload ? discont_price !== null : true) //filter by price
+     setSearchFilter: (state, action) => {
+      state.filters.search = action.payload;
     },
 
-    //from to
-
-    filterFromTo: (state, action) => {
-      const { from, to } = action.payload
-      state.filtered = state.list.filter(el => el.price >= from && el.price <= to  )
-    },
-//-------
-    sortByDate: (state) => {
-      state.list.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
-    },
-
-    sortByHighLowPrice: (state) => {
-      state.list.sort((a, b) => {
-        const priceA = a.discont_price !== null ? a.discont_price : a.price;
-        const priceB = b.discont_price !== null ? b.discont_price : b.price;
-        return priceB - priceA;
-      });
-    },
-
-    sortByLowHighPrice: (state) => {
-      state.list.sort((a, b) => {
-        const priceA = a.discont_price !== null ? a.discont_price : a.price;
-        const priceB = b.discont_price !== null ? b.discont_price : b.price;
-        return priceA - priceB;
-      });
-    },
-    setMinPrice: (state, action) => {
-      state.minPrice = action.payload;
-    },
-    setMaxPrice: (state, action) => {
-      state.maxPrice = action.payload;
+    setPriceRangeFilter: (state, action) => {
+      state.filters.range = action.payload;
     },
-    filterByPriceRange: (state) => {
-      state.filtered = state.list.filter((item) => {
-        const price = item.discont_price !== null ? item.discont_price : item.price;
-        const min = state.minPrice !== '' ? parseFloat(state.minPrice) : Number.NEGATIVE_INFINITY;
-        const max = state.maxPrice !== '' ? parseFloat(state.maxPrice) : Number.POSITIVE_INFINITY;
-        return price >= min && price <= max;
-      })
+    setSorting: (state, action) => {
+      state.sorting = action.payload;
     },
 
     getRelatedProducts: (state, {
@@ -113,18 +74,43 @@ const productsSlice = createSlice({
       state.isLoading = false;
     });
   },
-});
+} );
+
+export const selectFilteredProducts = (state) => {
+  const { list, filters, sorting } = state.products;
+  let filteredProducts = [...list];
+
+  if (filters.search.trim() !== '') {
+    filteredProducts = filteredProducts.filter(product =>
+      product.name.toLowerCase().includes(filters.search.trim().toLowerCase())
+    );
+  }
+
+  if (filters.range.min !== null && filters.range.max !== null) {
+    filteredProducts = filteredProducts.filter(
+      (product) =>
+        product.price >= filters.range.min && product.price <= filters.range.max
+    );
+  }
+
+  if (sorting === 'newest') {
+    filteredProducts.sort((a, b) => new Date(b.date) - new Date(a.date));
+  } else if (sorting === 'price-high-low') {
+    filteredProducts.sort((a, b) => b.price - a.price);
+  } else if (sorting === 'price-low-high') {
+    filteredProducts.sort((a, b) => a.price - b.price);
+  }
+
+  return filteredProducts;
+};
 
 export const {
-  filterByPrice,
-  getRelatedProducts,
-  sortByDate,
-  sortByHighLowPrice,
-  sortByLowHighPrice,
-  filterByPriceRange,
-  setMaxPrice,
-  setMinPrice,
-  filterFromTo,
+  setSearchFilter,
+  toggleCategoryFilter,
+  setCategoryFilters,
+  setPriceRangeFilter,
+  setSorting,
+  getRelatedProducts
 } = productsSlice.actions
 
 export default productsSlice.reducer
\ No newline at end of file
diff --git a/src/pages/ProductsPage/index.jsx b/src/pages/ProductsPage/index.jsx
index caeb0eb..341f1c8 100644
--- a/src/pages/ProductsPage/index.jsx
+++ b/src/pages/ProductsPage/index.jsx
@@ -11,85 +11,20 @@ import ProductItem from "../../components/pages_element/ProductItem";
 import { useDispatch, useSelector } from "react-redux";
 import { useParams } from "react-router-dom";
 import FilterPanel from "../../components/pages_element/FilterPanel";
-import {
-  filterByPrice,
-  filterByPriceRange,
-  filterFromTo,
-  setMaxPrice,
-  setMinPrice,
-  sortByDate,
-  sortByHighLowPrice,
-  sortByLowHighPrice,
-} from "../../features/products/productsSlice";
 
-export default function ProductsPage() {
-  const { list, filtered } = useSelector(({ products }) => products);
-  const dispatch = useDispatch();
-  const [isChecked, setIsChecked] = useState(false);
-  const [selectedOption, setSelectedOption] = useState("by default");
-
-  const handleCheckboxChange = () => {
-    setIsChecked(!isChecked);
-  };
-  const filteredList = isChecked  
-  ? list.filter((item) => item.discont_price !== null)
-    : list;
-
-  //sorted
-  const handleOptionChange = (option) => {
-    setSelectedOption(option);
-    if (option === "newest") {
-      dispatch(sortByDate(option));
-    } else if (option === "price: high-low") {
-      dispatch(sortByHighLowPrice(option));
-    } else if (option === "price: low-high") {
-      dispatch(sortByLowHighPrice(option));
-    } else {
-      return 0;
-    }
-  };
-
-  //price filter from ..to
-
-  const minPrice = useSelector((state) => state.products.minPrice);
-  const maxPrice = useSelector((state) => state.products.maxPrice);
-
-  //console.log(minPrice, 'minPrice',maxPrice, 'maxPrice' )
 
-  const handleMinPriceChange = (e) => {
-    dispatch(setMinPrice(e.target.value));
-    dispatch(filterByPriceRange());
-  };
-
-  const handleMaxPriceChange = (e) => {
-    dispatch(setMaxPrice(e.target.value));
-    dispatch(filterByPriceRange());
-  };
-
-  const handleFromToPrice = (priceFrom, priceTo) => {
-    const from = parseFloat(priceFrom);
-    const to = parseFloat(priceTo);
-    dispatch(filterFromTo({ from, to }));
-  };
+export default function ProductsPage() {
+  const products = useSelector(selectFilteredProducts);
   
+  
+
   return (
     <div className={`${s.wrapper} container`}>
-     
-<div className={s.title}>     
-   
-       <h2>All products</h2>
-       </div>
-       <FilterPanel
-        onCheckboxChange={handleCheckboxChange}
-        onOptionChange={handleOptionChange}
-        handleMinPriceChange={handleMinPriceChange}
-        handleMaxPriceChange={handleMaxPriceChange}
-        minPrice={minPrice}
-        maxPrice={maxPrice}
+      <div className={s.title}>
+        <h2>All products</h2>
+      </div>
+      <FilterPanel />
 
-        handleFromToPrice={(priceTo , priceFrom ) => handleFromToPrice(priceTo , priceFrom )}
-      />
-      
       <div className={s.category_container}>
         {filteredList.length > 0 &&
           filteredList.map((elem) => (
-- 
2.37.1 (Apple Git-137.1)

